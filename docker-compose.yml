version: '3.8'

services:
  # MongoDB Service
  mongo:
    image: mongo:5.0
    container_name: luxury-cars-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: luxury-car-rental
    networks:
      - luxury-cars-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/luxury-car-rental --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Backend API Service
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: luxury-cars-server
    restart: unless-stopped
    ports:
      - "5000:5000"
    volumes:
      - ./server:/app
      - /app/node_modules
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME:-root}:${MONGO_INITDB_ROOT_PASSWORD:-password}@mongo:27017/luxury-car-rental?authSource=admin
      CLIENT_URL: ${CLIENT_URL:-http://localhost:3000}
      JWT_SECRET: ${JWT_SECRET:-superSecret123}
      JWT_EXPIRE: ${JWT_EXPIRE:-30d}
      JWT_COOKIE_EXPIRE: ${JWT_COOKIE_EXPIRE:-30}
      SMTP_HOST: ${SMTP_HOST:-smtp.ethereal.email}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_SECURE: ${SMTP_SECURE:-false}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      FROM_NAME: ${FROM_NAME:-Dubai Luxury Cars}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@dubailuxurycars.com}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - luxury-cars-network
    command: >
      sh -c "if [ \"$NODE_ENV\" = \"production\" ]; then
               npm start;
             else
               npm run dev;
             fi"

  # Frontend Client Service
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:5000/api}
    container_name: luxury-cars-client
    restart: unless-stopped
    ports:
      - "3000:80"  # Using Nginx to serve in production, port 80
    volumes:
      - ./client:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:5000/api}
    depends_on:
      - server
    networks:
      - luxury-cars-network

  # Redis for caching and session management (optional)
  redis:
    image: redis:alpine
    container_name: luxury-cars-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - luxury-cars-network
    command: redis-server --appendonly yes

networks:
  luxury-cars-network:
    driver: bridge

volumes:
  mongo-data:
  redis-data:
