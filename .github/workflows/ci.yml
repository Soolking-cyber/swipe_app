name: Dubai Luxury Cars CI/CD

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  server-build:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand({ping: 1})' | mongosh --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
      
      - name: Install server dependencies
        run: cd server && npm ci
      
      - name: Lint server code
        run: cd server && npm run lint || echo "Linting not configured, skipping"
      
      - name: Build server
        run: cd server && npm run build
      
      - name: Test server
        run: cd server && npm test || echo "Tests not configured, skipping"
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/luxury-car-rental-test
          JWT_SECRET: test_secret_key
          JWT_EXPIRE: 1d
      
      - name: Upload server build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: server-build
          path: server/dist
  
  client-build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      
      - name: Install client dependencies
        run: cd client && npm ci
      
      - name: Lint client code
        run: cd client && npm run lint || echo "Linting not configured, skipping"
      
      - name: Build client
        run: cd client && npm run build
        env:
          REACT_APP_API_URL: https://api.dubailuxurycars.com/api
          CI: false # Prevents treating warnings as errors
      
      - name: Test client
        run: cd client && npm test -- --passWithNoTests
      
      - name: Upload client build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: client-build
          path: client/build

  docker-build:
    needs: [server-build, client-build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
      
      - name: Build and push server image
        uses: docker/build-push-action@v4
        with:
          context: ./server
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/dubai-luxury-cars-server:${{ env.BRANCH_NAME }}
            ${{ secrets.DOCKERHUB_USERNAME }}/dubai-luxury-cars-server:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/dubai-luxury-cars-server:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/dubai-luxury-cars-server:buildcache,mode=max
      
      - name: Build and push client image
        uses: docker/build-push-action@v4
        with:
          context: ./client
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/dubai-luxury-cars-client:${{ env.BRANCH_NAME }}
            ${{ secrets.DOCKERHUB_USERNAME }}/dubai-luxury-cars-client:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/dubai-luxury-cars-client:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/dubai-luxury-cars-client:buildcache,mode=max

  deploy:
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            cd /opt/dubai-luxury-cars
            docker-compose pull
            docker-compose up -d
            docker system prune -af

  notify:
    needs: [server-build, client-build, docker-build, deploy]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Notify on success
        if: ${{ success() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_TITLE: Dubai Luxury Cars Deployment
          SLACK_MESSAGE: 'Successfully built and deployed Dubai Luxury Cars :rocket:'
      
      - name: Notify on failure
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: danger
          SLACK_TITLE: Dubai Luxury Cars Deployment
          SLACK_MESSAGE: 'Build or deployment failed :x:'
